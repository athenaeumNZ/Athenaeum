# Generated by Django 4.1.4 on 2023-01-05 15:31

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import vinylLibrary.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('management', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('musicDatabase', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='IssueCrate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issue_date', models.DateField(default=vinylLibrary.models.date_now)),
                ('expiry_date', models.DateField(default=vinylLibrary.models.expiry)),
                ('membership_number', models.CharField(max_length=20)),
                ('library_crate', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='LibraryCrate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('crate_index_start', models.CharField(default='A', max_length=20)),
                ('crate_index_end', models.CharField(default='Z', max_length=20)),
                ('library_crate_id', models.CharField(max_length=70)),
                ('issued', models.CharField(default='Available', max_length=20)),
                ('reserved', models.CharField(default='Available', max_length=12)),
                ('date_created', models.DateField(auto_now_add=True)),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='management.library')),
                ('related_crate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='management.crate')),
            ],
            options={
                'ordering': ['library_crate_id'],
            },
        ),
        migrations.CreateModel(
            name='ReturnCrate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('library_crate', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='SaleVinyl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('catalog_number', models.CharField(max_length=100)),
                ('sale_price', models.IntegerField()),
                ('stock', models.IntegerField()),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='management.library')),
                ('related_release', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='musicDatabase.vinylrelease')),
            ],
        ),
        migrations.CreateModel(
            name='LibraryShopItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('cost_price', models.FloatField(max_length=20)),
                ('sale_price', models.FloatField(max_length=20)),
                ('Library', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='management.library')),
                ('related_shop_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='management.shopitem')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='management.supplier')),
            ],
        ),
        migrations.CreateModel(
            name='LibraryPlate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plate_size', models.CharField(choices=[('12"', '12 Inch'), ('10"', '10 Inch'), ('7"', '7 Inch')], default='12"', max_length=70)),
                ('date_added', models.DateField(auto_now_add=True)),
                ('media_condition', models.CharField(blank=True, choices=[('-', 'Unchecked'), ('G', 'Good'), ('VG', 'Very Good'), ('VG+', 'Very Good Plus'), ('NM', 'Near Mint'), ('M', 'Mint')], max_length=20)),
                ('vinyl_color', models.CharField(choices=[('Black', 'Black'), ('Blue Marbled', 'Blue Marbled'), ('Blue Translucent', 'Blue Translucent'), ('Clear', 'Clear'), ('Gold', 'Gold'), ('Grey Marbled', 'Grey Marbled'), ('Magenta Translucent', 'Magenta Translucent'), ('Orange Translucent', 'Orange Translucent'), ('Purple Marbled', 'Purple Marbled'), ('Red', 'Red'), ('Silver', 'Silver'), ('White', 'White')], default='Black', max_length=100)),
                ('release_type', models.CharField(blank=True, choices=[('Full Release', 'Full Release'), ('Full Release, Etched', 'Full Release, Etched'), ('Test Pressing', 'Test Pressing'), ('White Label', 'White Label'), ('Promo With Label', 'Promo With Label'), ('Promo, Label Sticker', 'Promo, Label Sticker'), ('White Label, Stickered', 'White Label, Stickered'), ('White Label, Stickered & Label Sticker', 'White Label, Stickered & Label Sticker'), ('White Label, Stamped', 'White Label, Stamped'), ('White Label, Stickered & Stamped', 'White Label, Stickered & Stamped'), ('Check', 'Check')], default='Full Release', max_length=100)),
                ('contributor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('library', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='management.library')),
                ('related_library_crate', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='vinylLibrary.librarycrate')),
                ('related_vinyl_plate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='musicDatabase.vinylplate')),
            ],
            options={
                'ordering': ['related_vinyl_plate__related_vinyl_release__catalog_number', 'related_vinyl_plate__plate_index'],
            },
        ),
    ]
